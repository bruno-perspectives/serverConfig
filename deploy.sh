#!/bin/bash

echo "
----------------------
  NODE - REACT - POSTGRESQL DEPLOYMENT ON UBUNTU 18
----------------------
"

until read -r -p "Application name : " appName && test "$appName" != ""; do
    continue
done

read -r -p"Database name [$appName] : " dbName
dbName=${dbName:-$appName}

read -r -p"Database admin password [StrongAdminP@ssw0rd]: " dbPassword
dbPassword=${dbPassword:-StrongAdminP@ssw0rd}

read -r -p "app directory [/var/www/$appName] : " baseDir
baseDir=${baseDir:-/var/www/$appName}

read -r -p "git repo url [https://github.com/PerspectivesLab/kos-medical-web.git]: " GIT_REPO
GIT_REPO=${GIT_REPO:-"https://github.com/PerspectivesLab/kos-medical-web.git"}

read -r -p"backend port [4410] : " PORT_BACK
PORT_BACK=${PORT_BACK:-4410}

ip_address="$(dig @resolver4.opendns.com myip.opendns.com +short)"

echo "
----------------------
  NODE & NPM & YARN
----------------------
"

# add nodejs 14 ppa (personal package archive) from nodesource
curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -

# install nodejs and npm
sudo apt -y install nodejs

# install yarn
npm install -g yarn


echo "
----------------------
  TOOLS
----------------------
"
#zsh
sudo apt install zsh
chsh -s $(which zsh)
sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

#json
npm install -g json


echo "
----------------------
  POSTGRESQL
----------------------
"
#remove other postgresql
# sudo apt-get --purge remove postgresql
# sudo apt-get --purge remove pgdg-keyring postgresql*
# sudo rm -rf /var/lib/postgresql/ #directory data postgresql
# sudo rm -rf /var/log/postgresql/ #directory log postgresql
# sudo rm -rf /etc/postgresql/ #directory base postgresql
# sudo deluser postgres
# sudo delgroup postgres

# Create the file repository configuration:
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

# Import the repository signing key:
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

# Update the package lists:
sudo apt-get update

# Install the latest version of PostgreSQL.
sudo apt-get -y install postgresql-12
sudo su postgres <<HERE
#  change postgre password
psql -c "alter user postgres with password '$dbPassword'"
# create database
psql -c "CREATE DATABASE $dbName;"
HERE

#  CREATE USER appUser WITH ENCRYPTED PASSWORD 'MyDBP@ss0rd';
#  GRANT ALL PRIVILEGES ON DATABASE kos_medical to appUser;

echo "
----------------------
  PM2
----------------------
"
# install pm2 with npm
npm install pm2@latest -g
sudo pm2 startup systemd


echo "
----------------------
  BUILD SOURCES
----------------------
"

#create base directiory
mkdir "$baseDir"
cd "$baseDir"

# fetch git repos
git clone "$GIT_REPO" .

#configure back
cd back
cp .env.sample .env
sed -i '/APP_ENV/c\APP_ENV="PROD"' .env
sed -i "/URL_FRONT/c\URL_FRONT=\"http://$ip_address\"" .env
sed -i "/URL_BACK/c\URL_BACK=\"http://$ip_address/api\"" .env
sed -i '/PORT_FRONT/c\PORT_FRONT=""' .env
sed -i "/PORT_BACK/c\PORT_BACK=\"$PORT_BACK\"" .env
db_key="{
    \"driver\": \"pg\",
    \"host\": \"localhost\",
    \"database\": \"$dbName\",
    \"user\": \"postgres\",
    \"password\": \"$dbPassword\"
}"
json -I -f database.json -e "this.PROD=$db_key"
nano database.json
nano .env

#install dependencies
yarn
# run migrations
yarn migration:run
#build back
yarn build
#add back to pm2
pm2 start build/server.js  --name "$appName"
#save pm2 config
pm2 save

#configure front
cd ../front
cp .env.sample .env
sed -i '/REACT_APP_ENV/c\REACT_APP_ENV="PROD"' .env
sed -i "/REACT_APP_URL_FRONT/c\REACT_APP_URL_FRONT=\"http://$ip_address\"" .env
sed -i "/REACT_APP_URL_BACK/c\REACT_APP_URL_BACK=\"http://$ip_address/api\"" .env
sed -i '/REACT_APP_PORT_BACK/c\REACT_APP_PORT_BACK=""' .env

nano .env
#install dependencies
yarn
# build front
yarn build


echo "
----------------------
  NGNIX
----------------------
"
sudo apt-get update

# install nginx
sudo apt-get install nginx

# start ngnix
sudo nginx

#ngnix config
echo "
upstream my_nodejs_upstream {
    server 127.0.0.1:$PORT_BACK;
    keepalive 64;
}

server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        # react app & front-end files
        location / {
                root  $baseDir/front/build;
                try_files \$uri /index.html;
        }
        # back proxy
        location /api/ {
                proxy_pass http://my_nodejs_upstream/;
                proxy_buffering         on;
        }


}
" > /etc/nginx/sites-available/default
nano /etc/nginx/sites-available/default
#reload ngnix
systemctl reload nginx


echo "
----------------------
  CERTBOOT
----------------------
"
sudo snap install core; sudo snap refresh core
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot


sudo certbot --nginx
sudo certbot renew --dry-run


echo "
----------------------
  UFW (FIREWALL)
----------------------
"
# allow ssh connections through firewall
sudo ufw allow OpenSSH
# allow http & https through firewall
sudo ufw allow 'Nginx Full'
# enable firewall
sudo ufw --force enable



#reference :
#https://medium.com/geekculture/deploying-a-react-app-and-a-node-js-server-on-a-single-machine-with-pm2-and-nginx-15f17251ee74
#https://pm2.keymetrics.io/docs/tutorials/pm2-nginx-production-setup